
public class sample1 {

	public static void main(String[] args) {
		// 숫자 자료형은 숫자 형태로 이루어진 자료형으로 우리가 이미 익숙히 알고 있는 것들이다.
		//123과 같은 정수, 12.34 같은 실수, 드물게 쓰이긴 하지만 8진수나 16진수 같은 것들도 있다.
		// 이런 숫자들을 자바에서 어떻게 사용하는지 알아보자.

		// 정수
		// int와 long을 주로 사용한다.
		// int의 표현 범위는 -2147483648 ~ 2147483647
		// long의 표현 범위는 -9223372036854775808 ~ 9223372036854775807 이다.
		
		int age = 10;
		long cntOfStar =  8764827384923849L;
		
		// long 변수에 값을 대입할 때
		//  대입하는 숫자 값이 int 자료형의 최대값인 2147483647 보다 큰 경우
		// 8764827384923849L과 같이 L 접미사(또는 소문자 l, 소문자 'l'은 숫자 1과 비슷하게 보이므로 추천하지 않는다.)
		// 를 붙여 주어야 한다.
		
		// 실수
		// 자바의 실수를 표현하기 위한 자료형은 float, double이다.
		// float와 double의 차이 역시 표현할 수 있는 숫자의 범위이다.
		// float의 표현범위는 -3.4*10의 38승 ~ 3.4 * 10의 38승
		// double의 표현 범위는 -1.7*10의 308승 ~ 1.7*10의 308승이다.
		
		float pi = 3.14F;
		double morePi = 3.14159265358979323846;
		
		// 자바에서 실수형은 디폴트가 double이므로 위의 예에서 보듯이
		// float 변수에 값을 대입할 때에는 3.14F 와 같이 F접미사(또는 소문자 f)를 꼭 붙여 주어야 한다.
		// float 자료형에 값을 대입할 때 접미사를 누락하면 컴파일 에러가 발생한다.

		// 또는 과학적 지수 표현식으로 다음과 같이 사용할 수 있다.
		
		double d1 = 123.4;
		double d2 = 1.234e2;
		
		// d1과 d2의 값은 123.4로 같다. 
		// d2의 e2는 10의 제곱을 의미한다.
		
		System.out.println("d1");
		System.out.println("d2");
		
		// 8진수와 16진수
		// 8진수와 16진수는 int 자료형을 사용하여 표시한다.
		// 0(숫자 '0')으로 시작하면 8진수,
		// 0x(숫자 '0' + 알파벳 'x')로 시작하면 16진수가 된다.
		
		int octal = 023;    // 십진수: 19
		int hex = 0xC;     // 십진수: 12
		
		System.out.println(octal);
		System.out.println(hex);
		
		// 숫자 연산
		// 자바의 사칙연산은 실생활에서 일반적으로 사용하는 사칙연산과 다를 바가 없다.
		// 자바는 +, -, *, / 기호를 이용하여 두 숫자간 사칙연산을 수행한다.
		
		// sample java
		int a = 10;
		int b = 5;
		System.out.println(a+b);
		System.out.println(a-10);
		System.out.println(a*b);
		System.out.println(a/b);
		
		// %는 나머지 값을 반환하는 연산자이다.
        System.out.println(7 % 3);  // 1 출력
        System.out.println(3 % 7);  // 3 출력
        
        // 증감면산 (++,--)
        // 자바는 ++, -- 기호를 이용하여 값을 증가하거나 감소시킬 수 있다.
        // 이러한 ++, -- 기호를 증감 연산자라고도 한다.
	
        int i = 0;
        int j = 10;
        i++;
        j--;

        System.out.println(i);  // 1 출력
        System.out.println(j);  // 9 출력
        
        // ++는 값을 1만큼 증가시키고 --는 값을 1만큼 감소시킨다는 것을 확인 할 수 있다.
        // 하지만 여기서 잠깐 실수하기 쉬운 것이 있다.
        // 그것은 바로 ++, -- 등의 연산자의 위치이다.
        
        int k = 0;
        System.out.println(k++);  // 0 출력
        System.out.println(k);  // 1 출력

        // System.out.println(k++) 의 출력값은 k가 1만큼 증가되어
        // 1 이 출력되어야 할 것 같지만 0 이 출력되었다.
        // 그렇다면 변수 k의 값이 증가되지 않은것일까?
        // 그 다음 문장인 System.out.println(k) 의 출력값을 확인 해 보니 1이 나온다.
        
        // 그렇다면 k의 값은 증가된 것이다.
        
        // 이런 결과가 나오는 원인은 변수 ++ 연산자의 위치 때문이다.
        // 즉 i++ 와 같이 ++ 연산자가 변수명 뒤에 붙으면
        // 해당 코드가 실행되는 순간에는 i 값이 변경되지 않는다.
        // 다만 i++ 문장이 실행된 이후에 i값이 증가하게 된다.
        // 이와는 반대로 i++ 대신 ++i라고 사용하게 되면 i 값이 먼저 증가된 후에 해당 코드가 실행된다.
        
        // 즉, 다음과 같은 차이가 있으니 잊지 말도록 하자.
        
        // i++ : 값이 참조된 후에 증가
        // ++i : 값이 참조되기 전에 증가
        // 다음처럼 연산자의 위치를 변경하여 확인 해 보자.
        
        i = 0;
        System.out.println(++i);  // 1 출력
        System.out.println(i);  // 1 출력
        
        // ++i 에 의해서 i값이 참조되기 전에 증가된 것을 확인 할 수 있다.
        // -- 연산자도 ++ 연산자와 동일한 규칙을 따른다.
        
	}

}
